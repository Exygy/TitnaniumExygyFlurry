/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package exygy.flurry.android;

import java.util.HashMap;
import java.util.Map;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import com.flurry.android.*;

@Kroll.module(name="Flurryforandroid", id="exygy.flurry.android")
public class FlurryforandroidModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "FlurryforandroidModule";
	
	public FlurryforandroidModule()
	{
		super();
	}
  	
	// ********* Sessions *************
    // apiKey is the unique key when for the application on flurry
    @Kroll.method
    public void onStartSession(String apiKey){
        FlurryAgent.onStartSession(TiApplication.getInstance() , apiKey);
		Log.d(TAG, "start context: " + TiApplication.getInstance());
    }
    
    //Must be called if you want events to be sent
  	@Kroll.method
    public void onEndSession(){      
        FlurryAgent.onEndSession(TiApplication.getInstance());
   		Log.d(TAG, "end context: " + TiApplication.getInstance());
    }
	// ********* Sessions *************
    
    // ********* Settings *************
    
  	@Kroll.method
    public void setContinueSessionMillis(long milliseconds){      
        FlurryAgent.setContinueSessionMillis(milliseconds);
   		Log.d(TAG, "set continue session timeout: " + milliseconds);
    }

  	@Kroll.method
    public void setReportLocation(boolean track){      
        FlurryAgent.setReportLocation(track);
   		Log.d(TAG, "track location: " + track);
    }

  	@Kroll.method
    public void setUseHttps(boolean useHttps){
  		FlurryAgent.setUseHttps(useHttps);
   		Log.d(TAG, "setUseHttps: " + useHttps);
    }
  	
  	@Kroll.method
    public void setCaptureUncaughtExceptions(boolean uncaught){
  		FlurryAgent.setCaptureUncaughtExceptions(uncaught);
   		Log.d(TAG, "setUseHttps: " + uncaught);
    }
    // ********* Settings *************
    
 	// ********* Events *************
  	@Kroll.method
    public void logEvent(String eventId, @Kroll.argument(optional=true) KrollDict inparameters){
    	HashMap<String, String> parameters = inparameters == null ? null : new HashMap<String, String>();
    	if (inparameters != null){
			for (Map.Entry<String, Object> entry : inparameters.entrySet()) {
				Object value = entry.getValue();
				
				parameters.put(entry.getKey(), value == null ? null : value.toString());
			}
    	}
        FlurryAgent.logEvent(eventId, parameters);
		Log.d(TAG, "logged event: " + eventId + " " + parameters);		
    }
    
  	@Kroll.method
    public void onPageView(){      
        FlurryAgent.onPageView();
        Log.d(TAG, "logged page view");
    }
    
  	@Kroll.method
    public void onError(String errorId, String message, String errorClass){      
        FlurryAgent.onError(errorId, message, errorClass);
        Log.d(TAG, "logged error: " + errorId + " | " + message + " | " + errorClass);
    }
 	// ********* Events *************
    
  	// ********* Demographics *************
    
    @Kroll.method
    public void setUserID(String userId){      
        FlurryAgent.setUserId(userId);
        Log.d(TAG, "set userid: " + userId);
    }
    
    @Kroll.method
    public void setAge(int age){      
        FlurryAgent.setAge(age);
        Log.d(TAG, "set age: " + age);
    }
    
    //Use the constants AndroidflurryModule.MALE or AndroidflurryModule.FEMALE in your javascript files
    @Kroll.method
    public void setGender(int gender){
        FlurryAgent.setGender((byte)gender);
        Log.d(TAG, "logged gender: " + gender);
    }
    // ********* Demographics *************
}

